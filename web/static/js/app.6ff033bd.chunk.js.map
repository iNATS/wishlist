{"version":3,"sources":["assets/fonts/SpaceMono-Regular.ttf","hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","screens/TabOneScreen.tsx","screens/TabThreeScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","index.js","hooks/useCachedResources.ts"],"names":["module","exports","useColorScheme","_useColorScheme","mainColor","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","TabOneScreen","source","uri","allowsFullscreenVideo","allowsBackForwardNavigationGestures","scalesPageToFit","startInLoadingState","bounces","dataDetectorTypes","geolocationEnabled","allowFileAccess","originWhitelist","TabTwoScreen","linking","prefixes","Linking","config","screens","Root","TabOne","TabTwo","TabThree","TabThreeScreen","Modal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","name","component","BottomTabNavigator","options","headerShown","Group","screenOptions","presentation","BottomTab","createBottomTabNavigator","initialRouteName","tabBarActiveTintColor","tabBarIcon","AntDesign","size","tabIconStyle","borderTopWidth","borderTopColor","borderColor","borderStyle","borderTopEndRadius","borderTopLeftRadius","flexDirection","errorText","registerRootComponent","isConnecte","isLoadingComplete","useState","setLoadingComplete","useEffect","a","async","SplashScreen","Font","FontAwesome","font","require","console","warn","useCachedResources","NetInfo","addEventListener","networkState","isConnected","SafeAreaView","Ionicons"],"mappings":"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","file":"static/js/app.6ff033bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#fcd733';\nconst tintColorDark = '#fcd733';\nconst mainColor = '#fcd733';\n\nexport default {\n  mainColor: mainColor,\n  light: {\n    text: '#000',\n    background: '#fcd733',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://google.com.eg'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar  style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { WebView } from \"react-native-webview\";\nimport { RootTabScreenProps } from \"../types\";\n\nexport default function TabOneScreen({\n}: RootTabScreenProps<\"TabOne\">) {\n  return (\n    <WebView\n      source={{ uri: \"https://wishlist.dz\" }}\n      allowsFullscreenVideo\n      allowsBackForwardNavigationGestures\n      scalesPageToFit={true}\n      startInLoadingState={true}\n      bounces={true}\n      dataDetectorTypes={\"phoneNumber\"}\n      geolocationEnabled={true}\n      allowFileAccess={true}\n      originWhitelist={[\"*\"]}\n    />\n  );\n}\n","import { WebView } from \"react-native-webview\";\n\nexport default function TabTwoScreen() {\n  return (\n    <WebView\n      source={{ uri: \"http://wishlist.dz/?page_id=12\" }}\n      allowsFullscreenVideo\n      allowsBackForwardNavigationGestures\n      scalesPageToFit={true}\n      startInLoadingState={true}\n      bounces={true}\n      dataDetectorTypes={\"phoneNumber\"}\n      geolocationEnabled={true}\n      allowFileAccess={true}\n      originWhitelist={[\"*\"]}\n    />\n  );\n}\n\n","import { WebView } from \"react-native-webview\";\nexport default function TabTwoScreen() {\n  return (\n    <WebView\n      source={{ uri: \"http://wishlist.dz/?page_id=14\" }}\n      allowsFullscreenVideo\n      allowsBackForwardNavigationGestures\n      scalesPageToFit={true}\n      startInLoadingState={true}\n      bounces={true}\n      dataDetectorTypes={\"phoneNumber\"}\n      geolocationEnabled={true}\n      allowFileAccess={true}\n      originWhitelist={[\"*\"]}\n    />\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n          TabThree: {\n            screens: {\n              TabThreeScreen: 'three',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { AntDesign, FontAwesome } from \"@expo/vector-icons\";\nimport { SimpleLineIcons } from \"@expo/vector-icons\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as React from \"react\";\nimport { ColorSchemeName, StyleSheet } from \"react-native\";\n\nimport Colors from \"../constants/Colors\";\nimport useColorScheme from \"../hooks/useColorScheme\";\nimport ModalScreen from \"../screens/ModalScreen\";\nimport NotFoundScreen from \"../screens/NotFoundScreen\";\nimport TabOneScreen from \"../screens/TabOneScreen\";\nimport TabThreeScreen from \"../screens/TabThreeScreen\";\nimport TabTwoScreen from \"../screens/TabTwoScreen\";\nimport {\n  RootStackParamList,\n  RootTabParamList,\n  RootTabScreenProps,\n} from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\n\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === \"dark\" ? DarkTheme : DefaultTheme}\n      \n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Root\"\n        component={BottomTabNavigator}\n        options={{ headerShown: false}}\n      />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: \"Oops!\" }}\n      />\n      <Stack.Group screenOptions={{ presentation: \"modal\"}} >\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneScreen}\n        options={{\n          headerShown:false,\n          title: \"Home\",\n          tabBarIcon: ({ color }) => (\n            <AntDesign name=\"home\" size={28} color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoScreen}\n        options={{\n          headerShown:false,\n          title: \"Contact\",\n          tabBarIcon: ({ color }) => (\n            <AntDesign name=\"user\" size={28} color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabThree\"\n        component={TabThreeScreen}\n        options={{\n          headerShown:false,\n          title: \"Contact\",\n          tabBarIcon: ({ color }) => (\n            <AntDesign name=\"shoppingcart\" size={28} color={color} />\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>[\"name\"];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\nconst styles = StyleSheet.create({\n  tabIconStyle: {\n    borderTopWidth: 3,\n    borderTopColor: \"red\",\n    borderColor: \"red\",\n    borderStyle: \"solid\",\n    borderTopEndRadius: 5,\n    borderTopLeftRadius: 5,\n    backgroundColor: \"#c1c1c1\",\n  },\n});\n","import { StatusBar } from \"expo-status-bar\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { Ionicons } from '@expo/vector-icons';\nimport NetInfo, { NetInfoStateType } from \"@react-native-community/netinfo\";\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport { View, Text, StyleSheet, SafeAreaView } from \"react-native\";\nimport Colors from \"./constants/Colors\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  var isConnecte;\n  const netAlert = NetInfo.addEventListener((networkState) => {\n    isConnecte = networkState.isConnected;\n  });\n  if (!isLoadingComplete || isConnecte === false) {\n    return (\n      <SafeAreaProvider>\n        <StatusBar />\n        <View style={styles.container}>\n        <Ionicons name=\"cloud-offline-outline\" size={100}/>\n        <Text style={styles.errorText}>something goes wrong.</Text>\n        </View>\n      </SafeAreaProvider>\n    );\n  } else {\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n       </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor:Colors.mainColor,\n    justifyContent: \"center\",\n    padding: 8,\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  errorText:{\n    padding:8,\n    fontSize:18,\n    color:Colors.light.text\n  }\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"],"sourceRoot":""}